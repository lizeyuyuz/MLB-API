team_numb <- nrow(team_table)
team_numb
team <- str_replace_all(tolower(team), "[[:punct:]]", "")
team <- str_replace_all(team, "[[:blank:]]", "")
team = "tbr"
team <- str_replace_all(tolower(team), "[[:punct:]]", "")
team <- str_replace_all(team, "[[:blank:]]", "")
eam
team
team_table[,-1]
team_table
team_abb <- team_table$abb
team_tab <- team_table[,-1]
team_tab <- apply(team_tab, 2, tolower)
team_tab <- apply(team_tab, 2, str_replace_all, pattern = "[[:punct:]]", "")
team_tab <- apply(team_tab, 2, str_replace_all, pattern = "[[:blank:]]", "")
team_tab <- as.data.frame(team_tab, stringsAsFactors = FALSE)
team_tab
team_table$abb
ind_abb <- str_which(team_table$abb, team)
ind_abb
team
ind_abb <- str_which(tolower(team_table$abb), team)
ind_full <- str_which(team_tab$full, team)
ind_loc <- str_which(team_tab$loc, team)
ind_name <- str_which(team_tab$name, team)
team_abb <- team_table$abb[ind_abb]
team_abb
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb("tbr")
getAbb("TBR")
getAbb("bos")
expect_is(getAbb("bos"), "BOS")
getAbb("bos")
expect_is(getAbb("bos"), "BOS")
expect_is(getAbb("TBR"), "TBR")
class(getAbb("TBR"))
class("TBR")
expect_equal(getAbb("TBR"), "TBR")
expect_equal(getAbb("bos"), "BOS")
expect_is(get_Abb("New York White Sox"), "character")
expect_is(getAbb("New York White Sox"), "character")
expect_is(getAbb("white sox"), "character")
expect_silent(getMovieData("Boston Red Sox"))
expect_silent(getAbb("Boston Red Sox"))
expect_error(getAbb("tempp"))
etAbb("tempp")
getAbb("tempp")
expect_error(getAbb(c("red sox", "white sox")))
getAbb(c("red sox", "white sox"))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
expect_error(getAbb(c("Red Sox", "White Sox")))
getAbb(c("Red Sox", "White Sox"))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb(c("Red Sox", "White Sox"))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
expect_error(getAbb(c("Red Sox", "White Sox")))
getAbb(c("Red Sox", "White Sox"))
expect_error(getAbb(c("Red Sox", "White Sox")))
class(getAbb(c("Red Sox", "White Sox")))
expect_tryerror(getAbb(c("Red Sox", "White Sox")))
testit <- function() warning("problem in testit", call. = FALSE)
testit
stopifnot(length(team) == 1)
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb(c("Red Sox", "White Sox"))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb(c("Red Sox", "White Sox"))
options(show.error.messages = TRUE)
options(show.error.messages = FALSE)
try(log("a"))
print(.Last.value)
options(show.error.messages = TRUE)
stop("Input has to be of length 1", call. = FALSE)
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb(c("Red Sox", "White Sox"))
options(error=NULL)
getAbb(c("Red Sox", "White Sox"))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb(c("Red Sox", "White Sox"))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R')
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R')
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R')
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R')
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getAbb(c("Red Sox", "White Sox"))
expect_error(getAbb(c("Red Sox", "White Sox")))
expect_silent(getAbb("torn"), "TOR")
getAbb("torn")
expect_silent(getAbb("torn"))
getPlayers(team = "red soz")
expect_equal(getAbb(team = "red soz"), "BOX")
expect_equal(getAbb(team = "red soz"), "BOS")
expect_equal(getAbb(team = "ny mets"), "NYM")
expect_equal(getAbb(team = "tor jays"), "TBJ")
expect_equal(getAbb(team = "tor jays"), "TOR")
expect_equal(getAbb(team = "tempa"), "TBR")
expect_equal(getAbb(team = "bay"), "TBR")
team_table
expect_equal(getAbb("mil"), "MIL")
test_that("check error messages"){
expect_silent(getAbb("Boston Red Sox"))
expect_silent(getAbb("torn"))
expect_error(getAbb(c("Red Sox", "White Sox")))
}
expect_equal(getAbb(team = "red soz"), "BOS")
expect_equal(getAbb(team = "ny mets"), "NYM")
expect_equal(getAbb(team = "ny yankes"), "NYY")
expect_equal(getAbb(team = "tor jays"), "TOR")
expect_equal(getAbb(team = "tampa bay"), "TBR")
expect_equal(getAbb(team = "bay"), "TBR")
getPlayers(team = "Baltimore Orioles")
expect_is(class(getPlayers(team = "Baltimore Orioles")), "data.frame")
team_table
expect_is(class(getPlayers(team = "DET")), "character")
expect_is(class(getPlayers(team = "red sox")), "character")
getPlayers(team = "red sox")
dim(getPlayers(team = "red sox"))
nrow(getPlayers(team = "red sox"))
length(getPlayers(team = "red sox"))
View(team_table)
expect_true(length(getPlayers("San Francisco Giants")) != NULL)
length(getPlayers("San Francisco Giants"))
expect_true(is.null(length(getPlayers("San Francisco Giants"))) )
is.null(length(getPlayers("San Francisco Giants")))
expect_true(!is.null(length(getPlayers("San Francisco Giants"))))
expect_true(!is.null(length(getPlayers("Seattle Mariners"))))
expect_true(is.null(dim(getPlayers("Pittsburgh Pirates"))))
test_that("check output class"){
expect_is(class(getPlayers(team = "Baltimore Orioles")), "character")
expect_is(class(getPlayers(team = "DET")), "character")
expect_is(class(getPlayers(team = "red sox")), "character")
}
test_that("check output dimension"){
expect_true(!is.null(length(getPlayers("San Francisco Giants"))))
expect_true(!is.null(length(getPlayers("Seattle Mariners"))))
expect_true(is.null(dim(getPlayers("Pittsburgh Pirates"))))
expect_true(is.null(dim(getPlayers("Minnesota Twins"))))
}
class(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "batting"))
expect_is(class(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "batting")), "data.frame")
class(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "batting"))
expect_equal(class(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "batting")), "data.frame")
expect_is(etStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "batting"), "data.frame")
expect_is(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "batting"), "data.frame")
getPlayers("BAL")
expect_is(getStats(player = "Chris Lee",
team = "Baltimore Orioles",
table = "pitching"), "data.frame")
expect_is(getStats(player = "Joey Rickard",
team = "Baltimore Orioles",
table = "pitching"), "data.frame")
expect_is(getStats(player = "Adam Jones",
team = "Baltimore Orioles",
table = "pitching"), "data.frame")
expect_is(getStats(player = "Alec Asher",
team = "Baltimore Orioles",
table = "pitching"), "data.frame")
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching"), "data.frame")
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding"), "data.frame")
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")
a <- getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")
class(a)
rownames(a)
a
t(a)
class(t(a))
as.data.frame(t(a))
a <- as.data.frame(t(a))
a
names(a)
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")$SB, "numeric")
a <- expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")$SB, "numeric")
a <- getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")$SB
a
a <- getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")
a
a[4]
class(a[4])
a[4]
as.null(a[4])
a
a[1,5]
a[1,5] <- as.numeric((a[1,5]))
a
a[1,5]
a$Age <- as.numeric(a$Age)
a
a$Age
a[1,2:ncol(a)-1] <- as.numeric(a[1,2:ncol(a)-1])
a[1,2:ncol(a)-1] <- as.numeric(a[1,2:ncol(a)-1])a
a
a$GS
a[1,2:ncol(a)-1] <- as.numeric(a[1,2:ncol(a)-1])
a[2:ncol(a)-1] <- as.numeric(a[2:ncol(a)-1])
a$Age
a$GS
a$G
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")$SB, "numeric")
a
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")$Age, "numeric")
expect_is(head(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching"), n = 1), "character")
head(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching"), n = 1)
head(a)
head(a,1)
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")[1], "character")
a[1]
a
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "fielding")
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "batting")
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")[1]
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")[1], "character")
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")$Name, "character")
expect_is(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")$Name, "character")
expect_is(getStats(player = "Zach Britton",
team = "Baltimore Orioles",
table = "batting")$Name, "character")
expect_is(getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")[2:], "numeric")
getStats(player = "Darren O'Day",
team = "Baltimore Orioles",
table = "pitching")[2:]
expect_is(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))], "numeric")
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1], class)
expect_is(
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1], class),
rep("numeric", n = length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 2))
expect_equal(
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1], class),
rep("numeric", n = length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 2))
rep("numeric", n = length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 2)
expect_equal(
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1], class),
rep("numeric", each = length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 2))
getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1]
getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[,2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1]
a
a[2:4]
getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[,2:(length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1)]
getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:(length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1)]
expect_equal(
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[,2:(length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1)], class),
rep("numeric", times = (length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 2)))
expect_true(
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[,2:(length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1)],
function(e) class(e) == "numeric"))
sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[,2:(length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1)],
function(e) class(e) == "numeric")
expect_true(
sum(sapply(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")[2:(length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding")) - 1)],
function(e) class(e) != "numeric")) == 0)
getPlayers("red")
getPlayers("red dox")
getPlayers("BOS")
expect_true(
sum(sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))],
function(e) class(e) != "numeric")) == 0)
sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))],
function(e) class(e) != "numeric")) == 0)
sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))],
function(e) class(e) != "numeric")
getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")
expect_true(
sum(sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))],
function(e) class(e) != "numeric")) == 0)
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
expect_true(
sum(sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))],
function(e) class(e) != "numeric")) == 0)
suppressWarnings(dat[2:ncol(dat)] <- as.numeric(dat[2:ncol(dat)]))
source('~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R', echo=TRUE)
expect_true(
sum(sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))],
function(e) class(e) != "numeric")) == 0)
expect_true(
sum(sapply(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching")[2:length(getStats(player = "Rick Porcello",
team = "Boston Red Sox",
table = "pitching"))],
function(e) class(e) != "numeric")) == 0)
getPlayers("giants")
expect_true(
sum(sapply(getStats(player = "Hunter Pence",
team = "San Francisco Giants",
table = "batting")[2:length(getStats(player = "Hunter Pence",
team = "San Francisco Giants",
table = "batting"))],
function(e) class(e) != "numeric")) == 0)
names(getStats(player = "Dylan Bundy",
team = "Baltimore Orioles",
table = "fielding"))
View(team_table)
expect_named(getStats(player = "Dylan Bundy",
team = "Seattle ",
table = "pitching"),
c("Player",     "Age",        "G",          "GS",         "CG",
"Inn"      ,  "Ch",         "PO",         "A"        ,  "E",
"DP"      ,   "Fld%",       "Rtot",       "Rtot/yr"  ,  "Rdrs",
"Rdrs/yr" ,   "RF/9",       "RF/G",       "PB",         "WP",
"SB",         "CS",         "CS%",        "lgCS%",      "Pickoffs",
"Pos Summary"))
expect_named(getStats(player = "",
team = "New York Mets",
table = "fielding"), c("Player",     "Age",        "G",          "GS",         "CG",
"Inn"      ,  "Ch",         "PO",         "A"        ,  "E",
"DP"      ,   "Fld%",       "Rtot",       "Rtot/yr"  ,  "Rdrs",
"Rdrs/yr" ,   "RF/9",       "RF/G",       "PB",         "WP",
"SB",         "CS",         "CS%",        "lgCS%",      "Pickoffs",
"Pos Summary"))
getPlayers("nym")
expect_named(getStats(player = "Jay Bruce",
team = "New York Mets",
table = "fielding"), c("Player",     "Age",        "G",          "GS",         "CG",
"Inn"      ,  "Ch",         "PO",         "A"        ,  "E",
"DP"      ,   "Fld%",       "Rtot",       "Rtot/yr"  ,  "Rdrs",
"Rdrs/yr" ,   "RF/9",       "RF/G",       "PB",         "WP",
"SB",         "CS",         "CS%",        "lgCS%",      "Pickoffs",
"Pos Summary"))
names(getStats(player = "Aaron Hill",
team = "San Francisco Giants",
table = "batting"))
expect_named(getStats(player = "Aaron Hill",
team = "San Francisco Giants",
table = "batting"), c("Name","Pos", "Rk",  "Age", "G",   "PA",  "AB",  "R",   "H",    "2B",
"3B",  "HR",  "RBI", "SB",  "CS",  "BB",  "SO",  "BA",  "OBP", "SLG",
"OPS", "OPS+","TB",  "GDP", "HBP", "SH",  "SF",  "IBB" ))
getPlayers("TBR")
names(getStats(player = "Chih-Wei Hu",
team = "Tampa Bay Rays",
table = "pitching"))
expect_named(getStats(player = "Chih-Wei Hu",
team = "Tampa Bay Rays",
table = "pitching"), c( "Name", "Pos"  ,"Rk"   ,"Age" , "W"   , "L"   , "W-L%" ,"ERA" , "G"    ,"GS",
"GF" ,  "CG"  , "SHO" , "SV" ,  "IP" ,  "H"  ,  "R"   , "ER" ,  "HR"  , "BB",
"IBB",  "SO"  , "HBP" , "BK" ,  "WP" ,  "BF" ,  "ERA+", "FIP",  "WHIP", "H9",
"HR9",  "BB9" , "SO9" , "SO/W")
)
library(BaseballAPI)
library(BaseballAPI)
data("team_table")
getAbb("red sox")
getPlayers(team = "Boston red sox")
getstats(player = "Sandy Leon", team = "Boston red sox", table = "fielding")
getStats(player = "Sandy Leon", team = "Boston red sox", table = "fielding")
getStats(player = "Sandy Leon", team = "Boston red sox", table = "batting")
getStats(player = "Sandy Leon", team = "Boston red sox", table = "batting")
getStats(player = "Sandy Leon", team = "Boston red sox", table = "fielding")
getStats(player = "Sandy Leon", team = "Boston red sox", table = "batting")
library(BaseballAPI)
context("getStats")
library(stringdist)
librart()
library(BaseballAPI)
load("~/Dropbox/umich_2017_winter/stats701/final_project_part1/BaseballAPI/data/team_table.RData")
load("Baseball_API")
load("~/Dropbox/umich_2017_winter/stats701/final_project_part1/BaseballAPI/.RData")
