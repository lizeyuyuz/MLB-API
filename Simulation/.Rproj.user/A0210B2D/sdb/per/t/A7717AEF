{
    "collab_server" : "",
    "contents" : "#' Simulation function\n#'\n#' @param reps\n#' @param n\n#' @param beta\n#' @param eps.dist\n#' @param ...\n#'\n#' @return a list of legnth 3 containing the distribution of beta hat, estimates of the power of the test to detect the effect beta and the distribution of R2.\n#'\n#' @export\n#'\n#' @import rmutil\n#'\n#' @examples\n#' regsim(reps = 1000, n = 100, beta = 1.2, eps.dist = \"uniform\", min = -1, max = 1)\n#' regsim(reps = 1000, n = 100, beta = 1.2, eps.dist = \"t\")\n#' regsim(reps = 1000, n = 100, beta = 1.2, eps.dist = \"laplace\", m = 0 , s = 1)\nregsim <- function(reps = 1000, n = 100, beta = 1.2, eps.dist = \"uniform\", ...){\n    library(rmutil)\n    lis <- vector(length = 3, mode = \"list\")\n    names(lis) <- c(\"beta_hat\", \"power\", \"rsq\")\n    # beta containers\n    lis$beta_hat <- matrix(NA, nrow = reps, ncol = 2)\n    colnames(lis$beta_hat) <- c(\"sim\", \"norm\")\n    # rsq containers\n    lis$rsq <- matrix(NA, nrow = reps, ncol = 2)\n    colnames(lis$rsq) <- c(\"sim\", \"norm\")\n    # power containers\n    lis$power <- matrix(NA, nrow = 1, ncol = 2)\n    colnames(lis$power) <- c(\"sim\", \"norm\")\n\n    save_sim <- vector(length = reps)\n    save_norm <- vector(length = reps)\n\n    for(i in 1:reps){\n        err_dist <- switch(eps.dist,\n                           \"uniform\" = runif(n, ...) * sample(c(-1, 1), n, replace = TRUE),\n                           \"t\" = rt(n, df = n-2, ...),\n                           \"laplace\" = rlaplace(n, ...) * sample(c(-1, 1), n, replace = TRUE))\n        x <- rnorm(n)\n        err_norm <- rnorm(n, sd = sd(err_dist))\n        beta0 <- 0.6\n        # generate responses\n        y <- beta0 + beta * x + err_dist\n        y_norm <- beta0 + beta * x + err_norm\n\n        # run lm\n        mod <- lm(y ~ x)\n        mod_norm <- lm(y_norm ~ x)\n\n        lis$beta_hat[i, 1] <- mod$coefficients[2]\n        lis$beta_hat[i, 2] <- mod_norm$coefficients[2]\n\n        # find rejection region using asymptotic distn\n        z <- sqrt(n)*(abs(mod$coefficients[2] - beta))\n        save_sim[i] <- ifelse(z >= qnorm(0.975), FALSE, TRUE)\n        z <- sqrt(n)*(mod_norm$coefficients[2] - beta)\n        save_norm[i] <- ifelse(z >= qnorm(0.975), FALSE, TRUE)\n\n        lis$rsq[i, 1] <- summary(mod)$r.squared\n        lis$rsq[i, 2] <- summary(mod_norm)$r.squared\n    }\n\n    lis$power[1,1] <- mean(save_sim)\n    lis$power[1,2] <- mean(save_norm)\n\n    lis$beta_hat <- as.data.frame(lis$beta_hat)\n    lis$power <- as.data.frame(lis$power)\n    lis$rsq <- as.data.frame(lis$rsq)\n\n    return(lis)\n}\n\n\n#' Simulation plotting function\n#'\n#' @param reps\n#' @param n\n#' @param beta\n#' @param eps.dist\n#' @param which.plot\n#' @param ...\n#' @return a series of plots comparing parameters simulated from different error distributions\n#' @export\n#' @import ggplot2\n#' @import reshape2\n#' @import gridExtra\n#' @import stringr\n#' @examples\n#' plotRegsim(reps = 1000, n = c(50, 100, 500), beta = c(.4,  1, 1.5), eps.dist = \"uniform\", min = -1, max = 1, which.plot = \"r2\")\n#' plotRegsim(reps = 1000, n = c(50, 100, 500), beta = c(.4, .8, 1, 1.5), eps.dist = \"laplace\", m = -1, s = 1, which.plot = \"power\")\n#' plotRegsim(reps = 1000, n = c(50, 100, 500), beta = c(.4, .8, 1.5), eps.dist = \"t\", which.plot = \"beta hat\")\nplotRegsim <- function(reps = 1000,\n                       n = c(50, 100, 500),\n                       beta = c(0.4, 0.8, 1, 1.5),\n                       eps.dist = \"uniform\",\n                       which.plot = \"r2\",\n                       ...){\n    library(rmutil)\n    library(ggplot2)\n    library(reshape2)\n    library(gridExtra)\n    library(stringr)\n    # create containers\n    indx <- seq(1,reps, by= 1)\n    power_box <- rep(NA, each = 4)\n    beta_box<- rep(NA, each = 4)\n    r2_box <- rep(NA, each = 4)\n    # loop through combinations of betas and ns\n    for(j in seq_along(n)){\n        for(k in seq_along(beta)){\n            lis <- regsim(reps = reps,\n                          n = n[j],\n                          beta = beta[k],\n                          eps.dist = eps.dist,\n                          ... = ... )\n            if(which.plot == \"power\"){\n                power_box <- rbind(power_box, cbind(lis$power,\n                                                    n = rep(n[j], each = reps),\n                                                    beta = rep(beta[k], each = reps)))\n            }\n\n            if(which.plot == \"beta hat\"){\n                beta_box <- rbind(beta_box, cbind(lis$beta_hat,\n                                                      n = rep(n[j], each = reps),\n                                                      beta = rep(beta[k], each = reps)))\n            }\n\n            if(which.plot == \"r2\"){\n                r2_box <- rbind(r2_box, cbind(lis$rsq,\n                                               n = rep(n[j], each = reps),\n                                               beta = rep(beta[k], each = reps)))\n            }\n        }\n    }\n    # plot which.plot\n    if(which.plot == \"power\"){\n        names(power_box) <- c(\"sim\", \"norm\", \"n\", \"betak\")\n        power_box <- melt(power_box[-1,], id = c(\"n\", \"betak\"))\n        power_box$betak <- as.factor(power_box$betak)\n        levels(power_box$betak) <- paste0(rep(\"beta = \", each = length(beta)), levels(power_box$betak))\n        p <- ggplot(power_box, aes(x = n, y = value)) +\n            geom_line(aes(group = variable, color = variable,\n                          linetype = variable),\n                      position=position_dodge(width=0.9)) +\n            facet_wrap(~betak) +\n            labs(x = \"Sample size\", y = \"Power\",\n                 title = \"Simulated Power\")\n        return(p)\n    }else if(which.plot == \"beta hat\"){\n        beta_box <- beta_box[-1,]\n        beta_box$n <- as.factor(beta_box$n)\n        levels(beta_box$n) <- paste0(rep(\"n = \", each = length(n)), levels(beta_box$n))\n        beta_box$beta <- as.factor(beta_box$beta)\n        levels(beta_box$beta) <- paste0(rep(\"beta = \", each = length(beta)), levels(beta_box$beta))\n        names(beta_box) <- c(\"sim\", \"norm\", \"n\", \"betak\")\n        p <-ggplot(beta_box, aes(x = norm, y = sim)) +\n            geom_point(size = 0.4) +\n            labs(y = str_c(\"Estimated Coefficients (\", eps.dist, \" error distribution)\"),\n                 x = \"Estimated Coefficients  (normal error distribution)\",\n                 title =\"Simulated Estimated Coefficients\") +\n            geom_abline(slope = 1, intercept = 0) +\n            facet_wrap(n~betak)\n        return(p)\n    }else if(which.plot == \"r2\"){\n        r2_box <- r2_box[-1,]\n        r2_box$n <- as.factor(r2_box$n)\n        levels(r2_box$n) <- paste0(rep(\"n = \", each = length(n)), levels(r2_box$n))\n        r2_box$beta <- as.factor(r2_box$beta)\n        levels(r2_box$beta) <- paste0(rep(\"beta = \", each = length(beta)), levels(r2_box$beta))\n        names(r2_box) <- c(\"sim\", \"norm\", \"n\", \"betak\")\n        p <- ggplot(r2_box, aes(x = norm, y = sim)) +\n            geom_point(size = 0.4) +\n            labs(x = \"R-squared (normal error distribution)\",\n                 y = str_c(\"R-squared (\", eps.dist, \" error distribution)\"),\n                 title = \"Simulated R-squared\") +\n            geom_abline(slope = 1, intercept = 0)+\n            facet_wrap(n~betak)\n        return(p)\n    }\n}\n",
    "created" : 1493351117257.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1482209980",
    "id" : "A7717AEF",
    "lastKnownWriteTime" : 1493351546,
    "last_content_update" : 1493351546600,
    "path" : "~/Dropbox/umich_2017_winter/stats701/final_project/Simulation/R/simulation.R",
    "project_path" : "R/simulation.R",
    "properties" : {
        "marks" : "<:122,48\n>:122,49"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}