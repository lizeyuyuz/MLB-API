{
    "collab_server" : "",
    "contents" : "#' A helper function for getting 3-letter abbreviation of a baseball team\n#'\n#' @param team\n#'\n#' @return a 3-letter abbreviation of the given baseball team\n#'\n#' @import stringdist\n#' @import stringr\n#'\n#' @examples\n#' getAbb(\"Baltimore Orioles\")\ngetAbb <- function(team = \"Baltimore Orioles\"){\n\n    if(length(team) != 1){\n       stop(\"Input has to be of length 1\", call. = FALSE)\n    }else{\n\n        data(team_table)\n\n        team_numb <- nrow(team_table)\n        team <- str_replace_all(tolower(team), \"[[:punct:]]\", \"\")\n        team <- str_replace_all(team, \"[[:blank:]]\", \"\")\n\n        team_tab <- team_table[,-1]\n        team_tab <- apply(team_tab, 2, tolower)\n        team_tab <- apply(team_tab, 2, str_replace_all, pattern = \"[[:punct:]]\", \"\")\n        team_tab <- apply(team_tab, 2, str_replace_all, pattern = \"[[:blank:]]\", \"\")\n        team_tab <- as.data.frame(team_tab, stringsAsFactors = FALSE)\n        # check for exact match\n        ind_abb <- str_which(tolower(team_table$abb), team)\n        ind_full <- str_which(team_tab$full, team)\n        ind_loc <- str_which(team_tab$loc, team)\n        ind_name <- str_which(team_tab$name, team)\n        # if not exact match, us 'jw' with penalty = 0.1 to fuzzy match\n        if(sum(ind_abb) != 0){\n            team_abb <- team_table$abb[ind_abb]\n        }else{\n            if(sum(ind_full) != 0){\n                team_abb <- team_table$abb[ind_full]\n            }else{\n                if(sum(ind_loc) != 0){\n                    team_abb <- team_table$abb[ind_loc]\n                }else{\n                    diss_loc <- stringdist(team, team_tab$loc, method = \"jw\", p=0.1)\n                    ind_loc = which(diss_loc == min(diss_loc))\n                    if(sum(ind_name) != 0){\n                        team_abb <- team_table$abb[ind_name]\n                    }else{\n                        diss_name <- stringdist(team, team_tab$name, method = \"jw\", p=0.1)\n                        ind_name = which(diss_loc == min(diss_name))\n                    }\n                }\n                diss_full <- stringdist(team, team_tab$full, method = \"jw\", p=0.1)\n                ind_full = which(diss_full == min(diss_full))\n\n                diss_vec <- c(diss_full, diss_loc, diss_name)\n                ind <- which(diss_vec == min(diss_vec)) %% team_numb\n                team_abb <- team_table$abb[ind]\n            }\n        }\n\n        if(length(team_abb) != 1){\n            stop(\"invalid entry\")\n        }else{\n            return(team_abb)\n        }\n     }\n}\n\n\n#' Get a list of team players\n#'\n#' @param team\n#'\n#' @return a character vector of players in a given baseball team\n#'\n#' @import stringr\n#' @import XML\n#'\n#' @examples\n#' getPlayers(\"Boston Red Sox\")\n#'\n#' @export\n#'\ngetPlayers <- function(team){\n    team <- getAbb(team)\n    # print(team)\n    url <- str_c(\"http://www.baseball-reference.com/teams/\",\n                             team, \"/2017-roster.shtml\")\n    data <- readHTMLTable(url, stringsAsFactors = FALSE)\n    tab <- as.data.frame(data[[1]], stringsAsFactors = FALSE)\n    return(tab$Name)\n}\n\n\n#' Get individual player statistics\n#'\n#' @param player\n#' @param team\n#' @param table\n#'\n#' @import stringr\n#' @import XML\n#'\n#' @return a data frame of player's statistics as requested by table parameter\n#' @export\n#'\n#' @examples\n#' getStats(player = \"Dylan Bundy\", team = \"Baltimore Orioles\", table = \"fielding\")\ngetStats <- function(player, team, table){\n    team = getAbb(team)\n    url <- str_c(\"http://www.baseball-reference.com/teams/\",\n                 team, \"/2017.shtml\")\n\n    if(table == \"batting\" | table == \"pitching\"){\n        data <- readHTMLTable(url)\n\n        if(table == \"batting\"){\n            stats <- data$team_batting\n        }else if(table == \"pitching\"){\n            stats <- data$team_pitching\n        }\n        stats$Name <- str_replace_all(stats$Name, \"\\\\([[:print:]]*\\\\)\", \"\")\n        stats$Name <- str_replace_all(stats$Name, \"\\\\*\", \"\")\n        stats$Name <- str_replace_all(stats$Name, \"\\\\#\", \"\")\n        stats$Name <- str_replace_all(stats$Name, \"[[:blank:]]*$\", \"\")\n        stats$Name <- tolower(stats$Name)\n        ind <- tolower(stats$Name) == tolower(player)\n\n        if(sum(ind) ==0){\n            stop(\"Player stats not found\", call. = FALSE)\n        }else{\n            stats <- stats[ind, ]\n            dat <- stats[-c(2,3)]\n            dat <- sapply(dat, as.character)\n            dat <- sapply(dat, function(e) ifelse(e == \"\", as.numeric(NA), as.numeric(e)))\n            dat <- data.frame(dat)\n            dat <- rbind(Name = player, Pos = as.character(stats$Pos), dat)\n            names(dat) <- NULL\n            dat <- as.data.frame(t(dat), stringsAsFactors = FALSE)\n            # suppress NA coersion warning message\n            suppressWarnings(dat[2:ncol(dat)] <- as.numeric(dat[2:ncol(dat)]))\n            return(dat)\n        }\n    }\n\n    if(table == \"fielding\"){\n        data <- htmlTreeParse(url, useInternal = TRUE, isURL = T)\n\n        dat <- xpathSApply(data, \"//div[@id='all_standard_fielding'][@class='table_wrapper setup_commented commented']//comment()\",\n                           xmlValue)\n        dat = unlist(strsplit(dat, '\\\\n'))\n        start <- str_which(dat, \"<tbody>\") + 1\n        end <- str_which(dat, \"<tfoot>\") - 3\n        dat <- dat[start:end]\n        ind <- str_which(dat, player)\n\n        if(sum(ind) ==0){\n            stop(\"Player stats not found\", call. = FALSE)\n        }else{\n            dat <- dat[ind]\n            dat <- str_replace_all(dat, \"^[[:print:]]*shtml\\\">\", \"\")\n            dat <- str_replace_all(dat, '\\\\</a\\\\>\\\\</strong\\\\>\\\\</th\\\\>\\\\<td class=\\\"right \\\" ', \"\")\n            dat <- str_replace_all(dat, '\\\\</td\\\\>\\\\<td class=\\\"right \\\" ', \"\")\n            dat <- str_replace_all(dat, '\\\\</td\\\\>\\\\<td class=\\\"left \\\" ', \"\")\n            dat <- str_replace_all(dat, '\\\\</td\\\\>\\\\</tr\\\\>', \"\")\n            dat <- str_replace_all(dat, '_def', \"\")\n            dat <- unlist(str_split(dat, 'data-stat=\\\"'))\n            dat <- str_replace_all(dat, ' csk=\\\"[[:print:]]+\\\"', \"\")\n            dat <- str_replace_all(dat, '\\\\%', \"\")\n            dat <- str_replace_all(dat, '_perc', \"\\\\%\")\n            dat <- str_replace_all(dat, '_per_season', \"/yr\")\n            dat <- str_replace_all(dat, '_per_game', \"/G\")\n            dat <- str_replace_all(dat, '_per_nine', \"/9\")\n            dat <- str_replace_all(dat, 'age', \"Age\")\n            dat <- str_replace_all(dat, 'chances', \"Ch\")\n            dat <- str_replace_all(dat, 'fielding', \"Fld\")\n            dat <- str_replace_all(dat, 'tz_runs_total', \"Rtot\")\n            dat <- str_replace_all(dat, 'bis_runs_total', \"Rdrs\")\n            dat <- str_replace_all(dat, 'range_factor', \"RF\")\n            dat <- str_replace_all(dat, 'caught_stealing%_lg', \"lgCS%\")\n            dat <- str_replace_all(dat, 'caught_stealing', \"CS\")\n            dat <- str_replace_all(dat, 'pickoffs', \"Pickoffs\")\n            dat <- str_replace_all(dat, 'pos_summary', \"Pos Summary\")\n            dat <- str_split(dat, '\\\" >')\n\n            dat_names <- sapply(dat[-1], \"[\", 1)\n            dat_stats <- sapply(dat[-1], \"[\", 2)\n            dat_stats <- ifelse(dat_stats == \"\", NA, dat_stats)\n            Pos_sum <- dat_stats[length(dat_stats)]\n            dat_stats <- rbind(dat[1],\n                               as.data.frame(as.numeric(dat_stats[-length(dat_stats)])),\n                               Pos_sum)\n            names(dat_stats) <- NULL\n            rownames(dat_stats) <- c(\"Player\", dat_names)\n            dat_stats <- as.data.frame(t(dat_stats), stringsAsFactors = FALSE)\n            end <- ncol(dat_stats) - 1\n            dat_stats[2:end] <- as.numeric(dat_stats[2:end])\n            return(dat_stats)\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1493351467675.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4145946626",
    "id" : "5D8B2C0C",
    "lastKnownWriteTime" : 1493349793,
    "last_content_update" : 1493349793,
    "path" : "~/Dropbox/umich_2017_winter/stats701/final_project/BaseballAPI/R/baseball.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}